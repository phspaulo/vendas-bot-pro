import type { NextApiRequest, NextApiResponse } from 'next';
import Stripe from 'stripe';
import { buffer } from 'micro';
import { createClient } from '@supabase/supabase-js';

// Evita que o Next.js processe o corpo automaticamente
export const config = {
  api: {
    bodyParser: false,
  },
};

// Inicializa o Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-04-10',
});

// Inicializa o Supabase com a service_role
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end('Method Not Allowed');

  let event: Stripe.Event;

  try {
    const buf = await buffer(req);
    const sig = req.headers['stripe-signature']!;
    event = stripe.webhooks.constructEvent(buf, sig, process.env.STRIPE_WEBHOOK_SECRET!);
  } catch (err: any) {
    console.error('⚠️ Webhook Error:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object as Stripe.Checkout.Session;

    const email = session.customer_details?.email || '';
    const name = session.customer_details?.name || '';
    const amountTotal = session.amount_total || 0;
    const currency = session.currency || '';
    const stripeSessionId = session.id;

    try {
      const { error } = await supabase
        .from('pagamentos')
        .insert([
          {
            email,
            nome: name,
            status: 'pago',
            stripe_session: stripeSessionId,
            valor: amountTotal,
            moeda: currency,
          },
        ]);

      if (error) {
        console.error('❌ Erro ao salvar no Supabase:', error);
        return res.status(500).send('Erro ao salvar no Supabase');
      }

      console.log('✅ Pagamento salvo com sucesso:', email);
    } catch (e) {
      console.error('❌ Erro inesperado:', e);
      return res.status(500).send('Erro inesperado');
    }
  }

  return res.status(200).json({ received: true });
}
